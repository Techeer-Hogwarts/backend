plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.1'
    id 'io.spring.dependency-management' version '1.1.5'
    id 'com.diffplug.spotless' version '6.25.0'
    id 'jacoco'
}

group = 'backend'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}


repositories {
    mavenCentral()
}

dependencies {
    // test H2
    testImplementation 'com.h2database:h2:2.2.224'

    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.springframework.boot:spring-boot-starter-mail'
    implementation 'org.springframework.boot:spring-boot-starter-amqp'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-aop'

    // QueryDSL
    implementation 'com.querydsl:querydsl-core:5.0.0'
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'

    annotationProcessor 'com.querydsl:querydsl-apt:5.0.0:jakarta'
    annotationProcessor 'jakarta.annotation:jakarta.annotation-api'
    annotationProcessor 'jakarta.persistence:jakarta.persistence-api'

    // JWT
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    implementation 'io.jsonwebtoken:jjwt-impl:0.11.5'
    implementation 'io.jsonwebtoken:jjwt-jackson:0.11.5'

    // Logback
    implementation 'ch.qos.logback:logback-classic'
    implementation 'ch.qos.logback:logback-core'
    implementation 'net.logstash.logback:logstash-logback-encoder:7.4'
    implementation 'org.projectlombok:lombok:1.18.30'

    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'org.postgresql:postgresql'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // SpringDoc OpenAPI
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.2'

    // S3
    implementation "software.amazon.awssdk:s3:2.31.32"

    // GoogleDrive
    implementation 'com.google.api-client:google-api-client:2.0.0'
    implementation 'com.google.oauth-client:google-oauth-client-jetty:1.34.1'
    implementation 'com.google.apis:google-api-services-drive:v3-rev20220815-2.0.0'
    implementation 'com.google.http-client:google-http-client-jackson2:1.43.3'
}

tasks.named('test', Test) {
    systemProperty 'spring.profiles.active', 'test'
    systemProperty 'spring.config.location', "$projectDir/src/test/resources/application-test.properties"
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

// QueryDSL 설정
def querydslDir = layout.buildDirectory.dir("generated/sources/annotationProcessor/java/main")

sourceSets {
    main.java.srcDir querydslDir
}

tasks.withType(JavaCompile).configureEach {
    options.getGeneratedSourceOutputDirectory().set(file(querydslDir))
}

configurations {
    querydsl.extendsFrom compileClasspath
}

clean {
    delete file(querydslDir)
}

spotless {
    java {
        // Google Java 포맷 적용
        /*
            googleJavaFormat() : 탭은 2개의 공백
            googleJavaFormat().aosp() : 탭은 4개의 공백
            [참고] https://github.com/google/google-java-format/issues/525
         */
        target 'src/**/*.java'
        googleJavaFormat().aosp()
        // 아래 순서로 import문 정렬
        importOrder('java', 'javax', 'jakarta', 'org', 'com')
        // 사용하지 않는 import 제거
        removeUnusedImports()
        // 각 라인 끝에 있는 공백을 제거
        trimTrailingWhitespace()
        // 파일 끝에 새로운 라인 추가
        endWithNewline()
    }
}

// Spotless가 compileJava 이후에 실행되도록 설정
spotlessJava.dependsOn compileJava

//jacoco {
//    toolVersion = "0.8.11"
//}
//
//// 공통 exclusion 패턴 정의
//def jacocoExcluded = [
//        '**/Q*.class',      // QueryDSL generated
//        '**/*Builder*',     // Lombok builder
//        '**/dto/**',        // DTO
//        '**/exception/**',  // Exception
//        '**/config/**',     // Config
//        '**/infra/**',      // Infra (S3, MQ 등)
//        '**/global/**'      // Global 패키지
//]

// // jacocoReport
// tasks.named('jacocoTestReport') {
//     dependsOn test
//     reports {
//         xml.required = true
//         html.required = true
//     }
//     classDirectories.setFrom(files(
//             classDirectories.files.collect { fileTree(dir: it, exclude: jacocoExcluded) }
//     ))
// }

// // jacocoCoverage 확인
// tasks.named('jacocoTestCoverageVerification') {
//     classDirectories.setFrom(files(
//             classDirectories.files.collect { fileTree(dir: it, exclude: jacocoExcluded) }
//     ))

//     violationRules {
//         rule {
//             element = 'CLASS'
//             limit {
//                 counter = 'LINE'
//                 value   = 'COVEREDRATIO'
//                 minimum = 0.00
//             }
//             limit {
//                 counter = 'BRANCH'
//                 value   = 'COVEREDRATIO'
//                 minimum = 0.00
//             }
//         }
//     }
// }

// 테스트 task 마무리 설정
tasks.test {
    useJUnitPlatform()
    finalizedBy tasks.jacocoTestReport
}